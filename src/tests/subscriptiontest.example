import WebSocket from 'ws'
import fetch from 'isomorphic-fetch'
import { SubscriptionClient, addGraphQLSubscriptions } from 'subscriptions-transport-ws'
import ApolloClient, { createNetworkInterface } from 'apollo-client'
import { gql } from 'apollo-server-express'

const endPoint = 'ws://localhost:2000/'

const client = new SubscriptionClient(endPoint, {
  reconnect: true
}, WebSocket)

const networkInterface = createNetworkInterface({
  uri: 'http://localhost:3000'
})

const networkSubscription = addGraphQLSubscriptions(
  networkInterface,
  client
)
const apolloClient = new ApolloClient({
  networkInterface: networkSubscription
})

it('test', async (done) => {
  apolloClient.subscribe({
    query: gql`
          subscription {
              traineeAdded {
              result{
                  message
              }
              }
          }`
  }, fetch).subscribe({
    next (data) {
      console.log('new data>>>>>>>>', data)
    },
    error (err) {
      console.log(err)
    }
  })

  apolloClient.mutate({
    mutation: gql`
        mutation{
          createTrainee(input: {
          email:"y@successive.tech"
            name:"y"
            password:"y"
          }) {
            data{
              name
            }
            message
            status
        }
    }`
  }, fetch)
    .then((result) => {
      console.log(result)
    })
    .catch((err) => {
      console.log(err)
    })

  done()
})
